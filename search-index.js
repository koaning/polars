var searchIndex = JSON.parse('{\
"polars":{"doc":"Polars: DataFrames in RustPolars is a DataFrame library…","i":[[0,"series","polars","Type agnostic columnar data structure.",null,null],[4,"Series","polars::series","SeriesThe columnar data type for a DataFrame. The Series…",null,null],[13,"UInt8","","",0,null],[13,"UInt16","","",0,null],[13,"UInt32","","",0,null],[13,"UInt64","","",0,null],[13,"Int8","","",0,null],[13,"Int16","","",0,null],[13,"Int32","","",0,null],[13,"Int64","","",0,null],[13,"Float32","","",0,null],[13,"Float64","","",0,null],[13,"Utf8","","",0,null],[13,"Bool","","",0,null],[13,"Date32","","",0,null],[13,"Date64","","",0,null],[13,"Time32Millisecond","","",0,null],[13,"Time32Second","","",0,null],[13,"Time64Nanosecond","","",0,null],[13,"Time64Microsecond","","",0,null],[13,"DurationNanosecond","","",0,null],[13,"DurationMicrosecond","","",0,null],[13,"DurationMillisecond","","",0,null],[13,"DurationSecond","","",0,null],[13,"IntervalDayTime","","",0,null],[13,"IntervalYearMonth","","",0,null],[13,"TimestampNanosecond","","",0,null],[13,"TimestampMicrosecond","","",0,null],[13,"TimestampMillisecond","","",0,null],[13,"TimestampSecond","","",0,null],[13,"LargeList","","",0,null],[11,"sum","","Returns `None` if the array is empty or only contains null…",0,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",0,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",0,[[],["option",4]]],[11,"mean","","",0,[[],["option",4]]],[8,"NamedFrom","","",null,null],[10,"new","","Initialize by name and values.",1,[[]]],[11,"array_data","","Get Arrow ArrayData",0,[[],[["arraydataref",6],["vec",3]]]],[11,"from_chunked_array","","",0,[[["chunkedarray",3],["polarsdatatype",8]]]],[11,"chunk_lengths","","Get the lengths of the underlying chunks",0,[[],["vec",3]]],[11,"name","","Name of series.",0,[[]]],[11,"rename","","Rename series.",0,[[]]],[11,"field","","Get field (used in schema)",0,[[],["field",3]]],[11,"dtype","","Get datatype of series.",0,[[],["arrowdatatype",4]]],[11,"chunks","","Underlying chunks.",0,[[],["vec",3]]],[11,"n_chunks","","No. of chunks",0,[[]]],[11,"i8","","",0,[[],[["result",6],["int8chunked",6]]]],[11,"i16","","",0,[[],[["int16chunked",6],["result",6]]]],[11,"i32","","Unpack to ChunkedArray",0,[[],[["result",6],["int32chunked",6]]]],[11,"i64","","Unpack to ChunkedArray",0,[[],[["int64chunked",6],["result",6]]]],[11,"f32","","Unpack to ChunkedArray",0,[[],[["float32chunked",6],["result",6]]]],[11,"f64","","Unpack to ChunkedArray",0,[[],[["result",6],["float64chunked",6]]]],[11,"u8","","Unpack to ChunkedArray",0,[[],[["uint8chunked",6],["result",6]]]],[11,"u16","","Unpack to ChunkedArray",0,[[],[["uint16chunked",6],["result",6]]]],[11,"u32","","Unpack to ChunkedArray",0,[[],[["uint32chunked",6],["result",6]]]],[11,"u64","","Unpack to ChunkedArray",0,[[],[["result",6],["uint64chunked",6]]]],[11,"bool","","Unpack to ChunkedArray",0,[[],[["result",6],["booleanchunked",6]]]],[11,"utf8","","Unpack to ChunkedArray",0,[[],[["utf8chunked",6],["result",6]]]],[11,"date32","","Unpack to ChunkedArray",0,[[],[["date32chunked",6],["result",6]]]],[11,"date64","","Unpack to ChunkedArray",0,[[],[["date64chunked",6],["result",6]]]],[11,"time32_millisecond","","Unpack to ChunkedArray",0,[[],[["time32millisecondchunked",6],["result",6]]]],[11,"time32_second","","Unpack to ChunkedArray",0,[[],[["time32secondchunked",6],["result",6]]]],[11,"time64_nanosecond","","Unpack to ChunkedArray",0,[[],[["result",6],["time64nanosecondchunked",6]]]],[11,"time64_microsecond","","Unpack to ChunkedArray",0,[[],[["result",6],["time64microsecondchunked",6]]]],[11,"duration_nanosecond","","Unpack to ChunkedArray",0,[[],[["result",6],["durationnanosecondchunked",6]]]],[11,"duration_microsecond","","Unpack to ChunkedArray",0,[[],[["result",6],["durationmicrosecondchunked",6]]]],[11,"duration_millisecond","","Unpack to ChunkedArray",0,[[],[["durationmillisecondchunked",6],["result",6]]]],[11,"duration_second","","Unpack to ChunkedArray",0,[[],[["durationsecondchunked",6],["result",6]]]],[11,"timestamp_nanosecond","","Unpack to ChunkedArray",0,[[],[["result",6],["timestampnanosecondchunked",6]]]],[11,"timestamp_microsecond","","Unpack to ChunkedArray",0,[[],[["result",6],["timestampmicrosecondchunked",6]]]],[11,"timestamp_millisecond","","Unpack to ChunkedArray",0,[[],[["result",6],["timestampmillisecondchunked",6]]]],[11,"timestamp_second","","Unpack to ChunkedArray",0,[[],[["result",6],["timestampsecondchunked",6]]]],[11,"interval_daytime","","Unpack to ChunkedArray",0,[[],[["result",6],["intervaldaytimechunked",6]]]],[11,"interval_year_month","","Unpack to ChunkedArray",0,[[],[["result",6],["intervalyearmonthchunked",6]]]],[11,"large_list","","Unpack to ChunkedArray",0,[[],[["result",6],["largelistchunked",6]]]],[11,"append_array","","",0,[[["arrayref",6]],["result",6]]],[11,"limit","","Take `num_elements` from the top as a zero copy view.",0,[[],["result",6]]],[11,"slice","","Get a zero copy view of the data.",0,[[],["result",6]]],[11,"append","","Append a Series of the same type in place.",0,[[],["result",6]]],[11,"filter","","Filter by boolean mask. This operation clones data.",0,[[["booleanchunked",6],["asref",8]],["result",6]]],[11,"take_iter","","Take by index from an iterator. This operation clones the…",0,[[["option",4]],["result",6]]],[11,"take_iter_unchecked","","Take by index from an iterator. This operation clones the…",0,[[["option",4]]]],[11,"take_opt_iter_unchecked","","Take by index from an iterator. This operation clones the…",0,[[["option",4]]]],[11,"take_opt_iter","","Take by index from an iterator. This operation clones the…",0,[[["option",4]],["result",6]]],[11,"take","","Take by index. This operation is clone.",0,[[],["result",6]]],[11,"len","","Get length of series.",0,[[]]],[11,"rechunk","","Aggregate all chunks to a contiguous array of memory.",0,[[["option",4]],["result",6]]],[11,"head","","Get the head of the Series.",0,[[["option",4]]]],[11,"tail","","Get the tail of the Series.",0,[[["option",4]]]],[11,"cast","","Cast to some primitive type.",0,[[],["result",6]]],[11,"unpack","","Get the `ChunkedArray` for some `PolarsDataType`",0,[[],[["chunkedarray",3],["result",6]]]],[11,"get","","Get a single value by index. Don\'t use this operation for…",0,[[],["anytype",4]]],[11,"sort_in_place","","Sort in place.",0,[[]]],[11,"sort","","",0,[[]]],[11,"argsort","","Retrieve the indexes needed for a sort.",0,[[],["vec",3]]],[11,"null_count","","Count the null values.",0,[[]]],[11,"unique","","Get unique values in the Series.",0,[[]]],[11,"arg_unique","","Get first indexes of unique values.",0,[[],["vec",3]]],[11,"is_null","","Get a mask of the null values.",0,[[],["booleanchunked",6]]],[11,"null_bits","","Get the bits that represent the null values of the…",0,[[],["vec",3]]],[11,"reverse","","return a Series in reversed order",0,[[]]],[11,"as_single_ptr","","Rechunk and return a pointer to the start of the Series.…",0,[[]]],[11,"shift","","Shift the values by a given period and fill the parts that…",0,[[],["result",6]]],[11,"fill_none","","Replace None values with one of the following strategies:",0,[[["fillnonestrategy",4]],["result",6]]],[0,"chunked_array","polars","The typed heart of every Series column.",null,null],[3,"ChunkedArray","polars::chunked_array","ChunkedArrayEvery Series contains a `ChunkedArray<T>`.…",null,null],[0,"aggregate","","Implementations of the ChunkAgg trait.",null,null],[0,"apply","","Implementations of the ChunkApply Trait.",null,null],[0,"ops","","Traits for miscellaneous operations on ChunkedArray",null,null],[4,"FillNoneStrategy","polars::chunked_array::ops","",null,null],[13,"Backward","","",2,null],[13,"Forward","","",2,null],[13,"Mean","","",2,null],[13,"Min","","",2,null],[13,"Max","","",2,null],[8,"TakeRandom","","Random access",null,null],[16,"Item","","",3,null],[10,"get","","Get a nullable value by index.",3,[[],["option",4]]],[10,"get_unchecked","","Get a value by index and ignore the null bit.",3,[[]]],[8,"TakeRandomUtf8","","",null,null],[16,"Item","","",4,null],[10,"get","","Get a nullable value by index.",4,[[],["option",4]]],[10,"get_unchecked","","Get a value by index and ignore the null bit.",4,[[]]],[8,"ChunkTake","","Fast access by index.",null,null],[10,"take","","Take values from ChunkedArray by index.",5,[[["option",4]],["result",6]]],[10,"take_unchecked","","Take values from ChunkedArray by index without checking…",5,[[["option",4]]]],[10,"take_opt","","Take values from ChunkedArray by Option.",5,[[["option",4]],["result",6]]],[10,"take_opt_unchecked","","Take values from ChunkedArray by Option.",5,[[["option",4]]]],[8,"ChunkSet","","Create a `ChunkedArray` with new values by index or by…",null,null],[10,"set_at_idx","","Set the values at indexes `idx` to some optional value…",6,[[["option",4]],["result",6]]],[10,"set_at_idx_with","","Set the values at indexes `idx` by applying a closure to…",6,[[],["result",6]]],[10,"set","","Set the values where the mask evaluates to `true` to some…",6,[[["booleanchunked",6],["option",4]],["result",6]]],[10,"set_with","","Set the values where the mask evaluates to `true` by…",6,[[["booleanchunked",6]],["result",6]]],[8,"ChunkCast","","Cast `ChunkedArray<T>` to `ChunkedArray<N>`",null,null],[10,"cast","","Cast `ChunkedArray<T>` to `ChunkedArray<N>`",7,[[],[["result",6],["chunkedarray",3]]]],[8,"ChunkApply","","Fastest way to do elementwise operations on a ChunkedArray",null,null],[10,"apply","","Apply a closure `F` elementwise.",8,[[]]],[8,"ChunkAgg","","Aggregation operations",null,null],[10,"sum","","Returns `None` if the array is empty or only contains null…",9,[[],["option",4]]],[10,"min","","",9,[[],["option",4]]],[10,"max","","Returns the maximum value in the array, according to the…",9,[[],["option",4]]],[10,"mean","","Returns the mean value in the array. Returns an option…",9,[[],["option",4]]],[10,"median","","Returns the mean value in the array. Returns an option…",9,[[],["option",4]]],[8,"ChunkCompare","","Compare Series and ChunkedArray\'s and get a `boolean` mask…",null,null],[10,"eq_missing","","Check for equality and regard missing values as equal.",10,[[],["booleanchunked",6]]],[10,"eq","","Check for equality.",10,[[],["booleanchunked",6]]],[10,"neq","","Check for inequality.",10,[[],["booleanchunked",6]]],[10,"gt","","Greater than comparison.",10,[[],["booleanchunked",6]]],[10,"gt_eq","","Greater than or equal comparison.",10,[[],["booleanchunked",6]]],[10,"lt","","Less than comparison.",10,[[],["booleanchunked",6]]],[10,"lt_eq","","Less than or equal comparison",10,[[],["booleanchunked",6]]],[8,"ChunkUnique","","Get unique values in a `ChunkedArray`",null,null],[10,"unique","","Get unique values of a ChunkedArray",11,[[],["chunkedarray",3]]],[10,"arg_unique","","Get first index of the unique values in a `ChunkedArray`.",11,[[],["vec",3]]],[11,"n_unique","","Number of unique values in the `ChunkedArray`",11,[[]]],[8,"ChunkSort","","Sort operations on `ChunkedArray`.",null,null],[10,"sort","","Returned a sorted `ChunkedArray`.",12,[[],["chunkedarray",3]]],[10,"sort_in_place","","Sort this array in place.",12,[[]]],[10,"argsort","","Retrieve the indexes needed to sort this array.",12,[[],["vec",3]]],[8,"ChunkFillNone","","Replace None values with various strategies",null,null],[10,"fill_none","","Replace None values with one of the following strategies:",13,[[["fillnonestrategy",4]],["result",6]]],[10,"fill_none_with_value","","Replace None values with a give value `T`.",13,[[],["result",6]]],[8,"ChunkFull","","Fill a ChunkedArray with one value.",null,null],[10,"full","","Create a ChunkedArray with a single value.",14,[[]]],[8,"ChunkReverse","","Reverse a ChunkedArray",null,null],[10,"reverse","","Return a reversed version of this array.",15,[[],["chunkedarray",3]]],[8,"ChunkFilter","","Filter values by a boolean mask.",null,null],[10,"filter","","Filter values in the ChunkedArray with a boolean mask.",16,[[["booleanchunked",6]],[["chunkedarray",3],["result",6]]]],[8,"ChunkShift","","Shift the values of a ChunkedArray by a number of periods.",null,null],[10,"shift","","Shift the values by a given period and fill the parts that…",17,[[["option",4]],[["chunkedarray",3],["result",6]]]],[0,"arithmetic","polars::chunked_array","Implementations of arithmetic operations on ChunkedArray\'s.",null,null],[8,"Pow","polars::chunked_array::arithmetic","",null,null],[10,"pow_f32","","",18,[[],["float32chunked",6]]],[10,"pow_f64","","",18,[[],["float64chunked",6]]],[0,"builder","polars::chunked_array","",null,null],[3,"PrimitiveChunkedBuilder","polars::chunked_array::builder","",null,null],[12,"builder","","",19,null],[3,"Utf8ChunkedBuilder","","",null,null],[12,"builder","","",20,null],[3,"AlignedVec","","",null,null],[12,"0","","",21,null],[3,"LargeListPrimitiveChunkedBuilder","","",null,null],[12,"builder","","",22,null],[3,"LargeListUtf8ChunkedBuilder","","",null,null],[5,"build_primitive_ca_with_opt","","",null,[[],["chunkedarray",3]]],[5,"build_with_existing_null_bitmap_and_slice","","Take an existing slice and a null bitmap and construct an…",null,[[["buffer",3],["option",4]],["primitivearray",3]]],[5,"get_bitmap","","Get the null count and the null bitmap of the arrow array",null,[[]]],[5,"round_upto_multiple_of_64","","Returns the nearest number that is `>=` than `num` and is…",null,[[]]],[5,"aligned_vec_to_primitive_array","","Take an owned Vec that is 64 byte aligned and create a…",null,[[["option",4],["alignedvec",3],["buffer",3]],[["arrowprimitivetype",8],["primitivearray",3]]]],[5,"get_large_list_builder","","",null,[[["arrowdatatype",4]],[["box",3],["larglistbuildertrait",8]]]],[6,"BooleanChunkedBuilder","","",null,null],[8,"AlignedAlloc","","",null,null],[10,"with_capacity_aligned","","",23,[[],["vec",3]]],[8,"NewChunkedArray","","",null,null],[10,"new_from_slice","","",24,[[]]],[10,"new_from_opt_slice","","",24,[[]]],[10,"new_from_opt_iter","","Create a new ChunkedArray from an iterator.",24,[[]]],[10,"new_from_iter","","Create a new ChunkedArray from an iterator.",24,[[]]],[8,"LargListBuilderTrait","","",null,null],[10,"append_opt_series","","",25,[[["option",4]]]],[10,"append_series","","",25,[[["series",4]]]],[10,"finish","","",25,[[],["largelistchunked",6]]],[11,"new","","",19,[[]]],[11,"append_value","","Appends a value of type `T` into the builder",19,[[]]],[11,"append_null","","Appends a null slot into the builder",19,[[]]],[11,"append_option","","Appends an `Option<T>` into the builder",19,[[["option",4]]]],[11,"finish","","",19,[[],["chunkedarray",3]]],[11,"new","","",20,[[]]],[11,"append_value","","Appends a value of type `T` into the builder",20,[[["asref",8]]]],[11,"append_null","","Appends a null slot into the builder",20,[[]]],[11,"append_option","","",20,[[["option",4],["asref",8]]]],[11,"finish","","",20,[[],["utf8chunked",6]]],[11,"new","","",21,[[["vec",3]],["result",6]]],[11,"into_inner","","",21,[[],["vec",3]]],[11,"new","","",22,[[["primitivebuilder",3]]]],[11,"append_slice","","",22,[[["option",4]]]],[11,"append_opt_slice","","",22,[[["option",4]]]],[11,"append_null","","",22,[[]]],[11,"new","","",26,[[["stringbuilder",3]]]],[0,"cast","polars::chunked_array","Implementations of the ChunkCast Trait.",null,null],[0,"chunkops","","",null,null],[8,"ChunkOps","polars::chunked_array::chunkops","",null,null],[10,"rechunk","","Aggregate to chunk id. A chunk id is a vector of the chunk…",27,[[["option",4]],["result",6]]],[10,"optional_rechunk","","Only rechunk if lhs and rhs don\'t match",27,[[["chunkedarray",3]],[["result",6],["option",4]]]],[0,"comparison","polars::chunked_array","",null,null],[8,"NumComp","polars::chunked_array::comparison","",null,null],[0,"iterator","polars::chunked_array","",null,null],[3,"NumIterSingleChunkNullCheck","polars::chunked_array::iterator","Single chunk with null values",null,null],[3,"NumIterSingleChunk","","Single chunk no null values",null,null],[3,"NumIterManyChunk","","Many chunks no null checks Both used as iterator with null…",null,null],[3,"NumIterManyChunkNullCheck","","Many chunks with null checks",null,null],[3,"Utf8IterCont","","No null checks and dont return Option but T directly. So…",null,null],[3,"Utf8IterSingleChunk","","No null checks",null,null],[3,"Utf8IterSingleChunkNullCheck","","",null,null],[3,"Utf8IterManyChunk","","Many chunks no nulls",null,null],[3,"Utf8IterManyChunkNullCheck","","Many chunks with nulls",null,null],[3,"BooleanIterCont","","No null checks and dont return Option but T directly. So…",null,null],[3,"BooleanIterSingleChunk","","No null checks",null,null],[3,"BooleanIterSingleChunkNullCheck","","",null,null],[3,"BooleanIterManyChunk","","Many chunks no nulls",null,null],[3,"BooleanIterManyChunkNullCheck","","Many chunks no nulls",null,null],[3,"ListIterCont","","No null checks and dont return Option but T directly. So…",null,null],[3,"ListIterSingleChunk","","No null checks",null,null],[3,"ListIterSingleChunkNullCheck","","",null,null],[3,"ListIterManyChunk","","Many chunks no nulls",null,null],[3,"ListIterManyChunkNullCheck","","Many chunks no nulls",null,null],[4,"NumericChunkIterDispatch","","",null,null],[13,"SingleChunk","","",28,null],[13,"SingleChunkNullCheck","","",28,null],[13,"ManyChunk","","",28,null],[13,"ManyChunkNullCheck","","",28,null],[4,"Utf8ChunkIterDispatch","","",null,null],[13,"SingleChunk","","",29,null],[13,"SingleChunkNullCheck","","",29,null],[13,"ManyChunk","","",29,null],[13,"ManyChunkNullCheck","","",29,null],[4,"BooleanIterDispatch","","",null,null],[13,"SingleChunk","","",30,null],[13,"SingleChunkNullCheck","","",30,null],[13,"ManyChunk","","",30,null],[13,"ManyChunkNullCheck","","",30,null],[4,"ListIterDispatch","","",null,null],[13,"SingleChunk","","",31,null],[13,"SingleChunkNullCheck","","",31,null],[13,"ManyChunk","","",31,null],[13,"ManyChunkNullCheck","","",31,null],[8,"IntoNoNullIterator","","Trait for ChunkedArrays that don\'t have null values. TODO:…",null,null],[16,"Item","","",32,null],[16,"IntoIter","","",32,null],[10,"into_no_null_iter","","",32,[[]]],[11,"to_ndarray","polars::chunked_array","If data is aligned in a single chunk and has no Null…",33,[[],[["result",6],["arrayview1",6]]]],[11,"to_ndarray","","If all nested `Series` have the same length, a 2…",33,[[],[["result",6],["array2",6]]]],[11,"rand_normal","","Create `ChunkedArray` with samples from a Normal…",33,[[],["result",6]]],[11,"rand_standard_normal","","Create `ChunkedArray` with samples from a Standard Normal…",33,[[]]],[11,"rand_uniform","","Create `ChunkedArray` with samples from a Uniform…",33,[[]]],[11,"rand_bernoulli","","Create `ChunkedArray` with samples from a Bernoulli…",33,[[],["result",6]]],[0,"set","","",null,null],[0,"take","","Traits to provide fast Random access to ChunkedArrays…",null,null],[3,"NumTakeRandomChunked","polars::chunked_array::take","",null,null],[3,"NumTakeRandomCont","","",null,null],[3,"NumTakeRandomSingleChunk","","",null,null],[3,"Utf8TakeRandom","","",null,null],[3,"Utf8TakeRandomSingleChunk","","",null,null],[3,"BoolTakeRandom","","",null,null],[3,"BoolTakeRandomSingleChunk","","",null,null],[3,"ListTakeRandom","","",null,null],[3,"ListTakeRandomSingleChunk","","",null,null],[4,"NumTakeRandomDispatch","","",null,null],[13,"Cont","","",34,null],[13,"Single","","",34,null],[13,"Many","","",34,null],[8,"AsTakeIndex","","",null,null],[10,"as_take_iter","","",35,[[],[["box",3],["iterator",8]]]],[11,"as_opt_take_iter","","",35,[[],[["box",3],["iterator",8]]]],[10,"take_index_len","","",35,[[]]],[8,"IntoTakeRandom","","Create a type that implements a faster `TakeRandom`.",null,null],[16,"Item","","",36,null],[16,"TakeRandom","","",36,null],[10,"take_rand","","Create a type that implements `TakeRandom`.",36,[[]]],[0,"temporal","polars::chunked_array","Traits and utilities for temporal data.",null,null],[5,"unix_time","polars::chunked_array::temporal","",null,[[],["naivedatetime",3]]],[8,"FromNaiveTime","","",null,null],[10,"new_from_naive_time","","",37,[[]]],[10,"parse_from_str_slice","","",37,[[]]],[8,"AsNaiveTime","","",null,null],[10,"as_naive_time","","",38,[[],[["vec",3],["option",4]]]],[8,"FromNaiveDateTime","","",null,null],[10,"new_from_naive_datetime","","",39,[[]]],[10,"parse_from_str_slice","","",39,[[]]],[8,"FromNaiveDate","","",null,null],[10,"new_from_naive_date","","",40,[[]]],[10,"parse_from_str_slice","","",40,[[]]],[8,"AsNaiveDateTime","","",null,null],[10,"as_naive_datetime","","",41,[[],[["option",4],["vec",3]]]],[8,"AsNaiveDate","","",null,null],[10,"as_naive_date","","",42,[[],[["vec",3],["option",4]]]],[0,"unique","polars::chunked_array","",null,null],[8,"ValueCounts","polars::chunked_array::unique","",null,null],[10,"value_counts","","",43,[[],[["option",4],["buildhasherdefault",3],["hashmap",3]]]],[0,"upstream_traits","polars::chunked_array","Implementations of upstream traits for ChunkedArray",null,null],[8,"Downcast","","",null,null],[10,"downcast_chunks","","",44,[[],["vec",3]]],[11,"array_data","","Get Arrow ArrayData",33,[[],[["arraydataref",6],["vec",3]]]],[11,"null_bits","","Get the null count and the buffer of bits representing…",33,[[],["vec",3]]],[11,"unpack_series_matching_type","","Series to ChunkedArray",33,[[["series",4]],[["result",6],["chunkedarray",3]]]],[11,"len","","Combined length of all the chunks.",33,[[]]],[11,"chunk_id","","Unique id representing the number of chunks",33,[[],["vec",3]]],[11,"chunks","","A reference to the chunks",33,[[],["vec",3]]],[11,"is_optimal_aligned","","Returns true if contains a single chunk and has no null…",33,[[]]],[11,"null_count","","Count the null values.",33,[[]]],[11,"limit","","Take a view of top n elements",33,[[],["result",6]]],[11,"append_array","","Append arrow array in place.",33,[[["arrayref",6]],["result",6]]],[11,"slice","","Slice the array. The chunks are reallocated the underlying…",33,[[],["result",6]]],[11,"is_null","","Get a mask of the null values.",33,[[],["booleanchunked",6]]],[11,"dtype","","Get data type of ChunkedArray.",33,[[],["arrowdatatype",4]]],[11,"head","","Get the head of the ChunkedArray",33,[[["option",4]]]],[11,"tail","","Get the tail of the ChunkedArray",33,[[["option",4]]]],[11,"append","","Append in place.",33,[[]]],[11,"name","","Name of the ChunkedArray.",33,[[]]],[11,"ref_field","","Get a reference to the field.",33,[[],["field",3]]],[11,"rename","","Rename this ChunkedArray.",33,[[]]],[11,"new_from_chunks","","Create a new ChunkedArray from existing chunks.",33,[[["vec",3],["arrayref",6]]]],[11,"new_utf8_from_slice","","",33,[[]]],[11,"new_utf8_from_opt_slice","","",33,[[]]],[11,"new_from_aligned_vec","","Create a new ChunkedArray by taking ownershipt of the…",33,[[["alignedvec",3]]]],[11,"new_with_null_bitmap","","Nullify values in slice with an existing null bitmap",33,[[["buffer",3],["option",4]]]],[11,"new_from_owned_with_null_bitmap","","Nullify values in slice with an existing null bitmap",33,[[["option",4],["alignedvec",3],["buffer",3]]]],[11,"cont_slice","","Contiguous slice",33,[[],["result",6]]],[11,"data_views","","Get slices of the underlying arrow data. NOTE: null values…",33,[[],["vec",3]]],[11,"as_single_ptr","","Rechunk and return a ptr to the start of the array",33,[[]]],[11,"map","","If cont_slice is successful a closure is mapped over the…",33,[[],[["map",3],["result",6]]]],[11,"map_null_checks","","If cont_slice fails we can fallback on an iterator with…",33,[[],[["map",3],["numericchunkiterdispatch",4]]]],[11,"fold","","If cont_slice is successful a closure can be applied as…",33,[[],["result",6]]],[11,"fold_null_checks","","If cont_slice fails we can fallback on an iterator with…",33,[[]]],[0,"datatypes","polars","Data types supported by Polars.At the moment Polars…",null,null],[4,"ArrowDataType","polars::datatypes","The set of datatypes that are supported by this…",null,null],[13,"Null","","Null type",45,null],[13,"Boolean","","A boolean datatype representing the values `true` and…",45,null],[13,"Int8","","A signed 8-bit integer.",45,null],[13,"Int16","","A signed 16-bit integer.",45,null],[13,"Int32","","A signed 32-bit integer.",45,null],[13,"Int64","","A signed 64-bit integer.",45,null],[13,"UInt8","","An unsigned 8-bit integer.",45,null],[13,"UInt16","","An unsigned 16-bit integer.",45,null],[13,"UInt32","","An unsigned 32-bit integer.",45,null],[13,"UInt64","","An unsigned 64-bit integer.",45,null],[13,"Float16","","A 16-bit floating point number.",45,null],[13,"Float32","","A 32-bit floating point number.",45,null],[13,"Float64","","A 64-bit floating point number.",45,null],[13,"Timestamp","","A timestamp with an optional timezone.",45,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",45,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",45,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",45,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",45,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",45,null],[13,"Interval","","A \\\"calendar\\\" interval which models types that don\'t…",45,null],[13,"Binary","","Opaque binary data of variable length.",45,null],[13,"FixedSizeBinary","","Opaque binary data of fixed size. Enum parameter specifies…",45,null],[13,"LargeBinary","","Opaque binary data of variable length and 64-bit offsets.",45,null],[13,"Utf8","","A variable-length string in Unicode with UTF-8 encoding.",45,null],[13,"LargeUtf8","","A variable-length string in Unicode with UFT-8 encoding…",45,null],[13,"List","","A list of some logical data type with variable length.",45,null],[13,"FixedSizeList","","A list of some logical data type with fixed length.",45,null],[13,"LargeList","","A list of some logical data type with variable length and…",45,null],[13,"Struct","","A nested datatype that contains a number of sub-fields.",45,null],[13,"Union","","A nested datatype that can represent slots of differing…",45,null],[13,"Dictionary","","A dictionary array where each element is a single value…",45,null],[8,"ArrowNumericType","","",null,null],[8,"ArrowPrimitiveType","","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",46,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",46,[[],["datatype",4]]],[10,"get_bit_width","","Returns the bit width of this primitive type.",46,[[]]],[10,"default_value","","Returns a default value of this primitive type.",46,[[]]],[3,"BooleanType","","",null,null],[3,"Date32Type","","",null,null],[3,"Date64Type","","",null,null],[4,"DateUnit","","Date is either a 32-bit or 64-bit type representing…",null,null],[13,"Day","","Days since the UNIX epoch.",47,null],[13,"Millisecond","","Milliseconds indicating UNIX time elapsed since the epoch…",47,null],[3,"DurationMicrosecondType","","",null,null],[3,"DurationMillisecondType","","",null,null],[3,"DurationNanosecondType","","",null,null],[3,"DurationSecondType","","",null,null],[3,"Float32Type","","",null,null],[3,"Float64Type","","",null,null],[3,"Int16Type","","",null,null],[3,"Int32Type","","",null,null],[3,"Int64Type","","",null,null],[3,"Int8Type","","",null,null],[3,"IntervalDayTimeType","","",null,null],[4,"IntervalUnit","","YEAR_MONTH or DAY_TIME interval in SQL style.",null,null],[13,"YearMonth","","Indicates the number of elapsed whole months, stored as…",48,null],[13,"DayTime","","Indicates the number of elapsed days and milliseconds,…",48,null],[3,"IntervalYearMonthType","","",null,null],[3,"Time32MillisecondType","","",null,null],[3,"Time32SecondType","","",null,null],[3,"Time64MicrosecondType","","",null,null],[3,"Time64NanosecondType","","",null,null],[4,"TimeUnit","","An absolute length of time in seconds, milliseconds,…",null,null],[13,"Second","","Time in seconds.",49,null],[13,"Millisecond","","Time in milliseconds.",49,null],[13,"Microsecond","","Time in microseconds.",49,null],[13,"Nanosecond","","Time in nanoseconds.",49,null],[3,"TimestampMicrosecondType","","",null,null],[3,"TimestampMillisecondType","","",null,null],[3,"TimestampNanosecondType","","",null,null],[3,"TimestampSecondType","","",null,null],[3,"UInt16Type","","",null,null],[3,"UInt32Type","","",null,null],[3,"UInt64Type","","",null,null],[3,"UInt8Type","","",null,null],[3,"Utf8Type","","",null,null],[3,"LargeListType","","",null,null],[4,"AnyType","","",null,null],[13,"Null","","",50,null],[13,"Boolean","","A binary true or false.",50,null],[13,"Utf8","","A UTF8 encoded string type.",50,null],[13,"UInt8","","An unsigned 8-bit integer number.",50,null],[13,"UInt16","","An unsigned 16-bit integer number.",50,null],[13,"UInt32","","An unsigned 32-bit integer number.",50,null],[13,"UInt64","","An unsigned 64-bit integer number.",50,null],[13,"Int8","","An 8-bit integer number.",50,null],[13,"Int16","","A 16-bit integer number.",50,null],[13,"Int32","","A 32-bit integer number.",50,null],[13,"Int64","","A 64-bit integer number.",50,null],[13,"Float32","","A 32-bit floating point number.",50,null],[13,"Float64","","A 64-bit floating point number.",50,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",50,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",50,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",50,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",50,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",50,null],[13,"TimeStamp","","Naive Time elapsed from the Unix epoch, 00:00:00.000 on 1…",50,null],[13,"IntervalDayTime","","A \\\"calendar\\\" interval which models types that don\'t…",50,null],[13,"IntervalYearMonth","","",50,null],[13,"LargeList","","",50,null],[6,"LargeListChunked","","",null,null],[6,"BooleanChunked","","",null,null],[6,"UInt8Chunked","","",null,null],[6,"UInt16Chunked","","",null,null],[6,"UInt32Chunked","","",null,null],[6,"UInt64Chunked","","",null,null],[6,"Int8Chunked","","",null,null],[6,"Int16Chunked","","",null,null],[6,"Int32Chunked","","",null,null],[6,"Int64Chunked","","",null,null],[6,"Float32Chunked","","",null,null],[6,"Float64Chunked","","",null,null],[6,"Utf8Chunked","","",null,null],[6,"Date32Chunked","","",null,null],[6,"Date64Chunked","","",null,null],[6,"DurationNanosecondChunked","","",null,null],[6,"DurationMicrosecondChunked","","",null,null],[6,"DurationMillisecondChunked","","",null,null],[6,"DurationSecondChunked","","",null,null],[6,"Time64NanosecondChunked","","",null,null],[6,"Time64MicrosecondChunked","","",null,null],[6,"Time32MillisecondChunked","","",null,null],[6,"Time32SecondChunked","","",null,null],[6,"IntervalDayTimeChunked","","",null,null],[6,"IntervalYearMonthChunked","","",null,null],[6,"TimestampNanosecondChunked","","",null,null],[6,"TimestampMicrosecondChunked","","",null,null],[6,"TimestampMillisecondChunked","","",null,null],[6,"TimestampSecondChunked","","",null,null],[8,"PolarsDataType","","",null,null],[10,"get_data_type","","",51,[[],["arrowdatatype",4]]],[8,"PolarsSingleType","","Any type that is not nested",null,null],[8,"PolarsNumericType","","",null,null],[8,"PolarsIntegerType","","",null,null],[8,"ToStr","","",null,null],[10,"to_str","","",52,[[],["string",3]]],[0,"doc","polars","Other documentation",null,null],[0,"changelog","polars::doc","",null,null],[0,"v0_3","polars::doc::changelog","Changelog v0.3Utf8 type is nullable #37Support all ARROW…",null,null],[0,"v0_4","","Changelog v0.4median aggregation added to…",null,null],[0,"time","polars::doc","DateTime related functionalityPolars supports all data…",null,null],[0,"error","polars","",null,null],[4,"PolarsError","polars::error","",null,null],[13,"ArrowError","","",53,null],[13,"InvalidOperation","","",53,null],[13,"ChunkMisMatch","","",53,null],[13,"DataTypeMisMatch","","",53,null],[13,"NotFound","","",53,null],[13,"ShapeMisMatch","","",53,null],[13,"Other","","",53,null],[13,"NoSelection","","",53,null],[13,"OutOfBounds","","",53,null],[13,"NoSlice","","",53,null],[13,"NoData","","",53,null],[13,"MemoryNotAligned","","",53,null],[13,"ParquetError","","",53,null],[13,"RandError","","",53,null],[13,"HasNullValues","","",53,null],[6,"Result","","",null,null],[0,"frame","polars","DataFrame module.",null,null],[3,"DataFrame","polars::frame","",null,null],[3,"RecordBatchIter","","",null,null],[0,"group_by","","",null,null],[3,"GroupBy","polars::frame::group_by","Returned by a groupby operation on a DataFrame. This…",null,null],[3,"Pivot","","Intermediate structure when a `pivot` operation is…",null,null],[11,"groupby","polars::frame","Group DataFrame using a Series column.",54,[[["selection",8]],[["groupby",3],["result",6]]]],[11,"select","polars::frame::group_by","Select the column by which the determine the groups. You…",55,[[]]],[11,"mean","","Aggregate grouped series and compute the mean per group.",55,[[],[["dataframe",3],["result",6]]]],[11,"sum","","Aggregate grouped series and compute the sum per group.",55,[[],[["dataframe",3],["result",6]]]],[11,"min","","Aggregate grouped series and compute the minimal value per…",55,[[],[["dataframe",3],["result",6]]]],[11,"max","","Aggregate grouped series and compute the maximum value per…",55,[[],[["dataframe",3],["result",6]]]],[11,"first","","Aggregate grouped series and find the first value per group.",55,[[],[["dataframe",3],["result",6]]]],[11,"count","","Aggregate grouped series and compute the number of values…",55,[[],[["dataframe",3],["result",6]]]],[11,"agg_list","","Aggregate the groups of the groupby operation into lists.",55,[[],[["dataframe",3],["result",6]]]],[11,"pivot","","Pivot a column of the current `DataFrame` and perform one…",55,[[],["pivot",3]]],[11,"first","","Aggregate the pivot results by taking the first occurring…",56,[[],[["dataframe",3],["result",6]]]],[11,"sum","","Aggregate the pivot results by taking the sum of all…",56,[[],[["dataframe",3],["result",6]]]],[11,"min","","Aggregate the pivot results by taking the minimal value of…",56,[[],[["dataframe",3],["result",6]]]],[11,"max","","Aggregate the pivot results by taking the maximum value of…",56,[[],[["dataframe",3],["result",6]]]],[11,"mean","","Aggregate the pivot results by taking the mean value of…",56,[[],[["dataframe",3],["result",6]]]],[11,"median","","Aggregate the pivot results by taking the median value of…",56,[[],[["dataframe",3],["result",6]]]],[0,"hash_join","polars::frame","",null,null],[8,"HashJoin","polars::frame::hash_join","",null,null],[10,"hash_join_inner","","",57,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_left","","",57,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_outer","","",57,[[["chunkedarray",3]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"inner_join","polars::frame","Perform an inner join on two DataFrames.",54,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[11,"left_join","","Perform a left join on two DataFrames",54,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[11,"outer_join","","Perform an outer join on two DataFrames",54,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[0,"select","","",null,null],[8,"Selection","polars::frame::select","",null,null],[10,"to_selection_vec","","",58,[[],["vec",3]]],[0,"ser","polars::frame","",null,null],[5,"finish_reader","polars::frame::ser","",null,[[["arrowreader",8]],[["dataframe",3],["result",6]]]],[0,"csv","","(De)serializing CSV filesWrite a DataFrame to a csv…",null,null],[3,"ReaderBuilder","polars::frame::ser::csv","CSV file reader builder",null,null],[3,"WriterBuilder","","A CSV writer builder",null,null],[3,"CsvWriter","","Write a DataFrame to csv.",null,null],[3,"CsvReader","","Creates a DataFrame after reading a csv.",null,null],[11,"has_headers","","Set whether to write headers",59,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",59,[[]]],[11,"with_date_format","","Set the CSV file\'s date format",59,[[["string",3]]]],[11,"with_time_format","","Set the CSV file\'s time format",59,[[["string",3]]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp formatch array in",59,[[["string",3]]]],[11,"with_buffer_size","","Set the size of the write buffers. Buffer size is the…",59,[[]]],[11,"with_schema","","Create a new DataFrame by reading a csv file.",60,[[["arc",3],["schema",3]]]],[11,"has_header","","Set whether the CSV file has headers",60,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",60,[[]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",60,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",60,[[]]],[11,"with_projection","","Set the reader\'s column projection",60,[[["vec",3]]]],[0,"ipc","polars::frame::ser","(De)serializing Arrows IPC format.Arrow IPC is a binary…",null,null],[3,"IPCReader","polars::frame::ser::ipc","Read Arrows IPC format into a DataFrame",null,null],[3,"IPCWriter","","Write a DataFrame to Arrow\'s IPC format",null,null],[11,"with_batch_size","","Set the size of the write buffer. Batch size is the amount…",61,[[]]],[0,"json","polars::frame::ser","(De)serialize JSON files.Read JSON to a DataFrameExample",null,null],[3,"ReaderBuilder","polars::frame::ser::json","JSON file reader builder",null,null],[3,"JsonReader","","",null,null],[11,"with_schema","","Set the JSON file\'s schema",62,[[["arc",3],["schema",3]]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",62,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)…",62,[[]]],[11,"with_projection","","Set the reader\'s column projection",62,[[["string",3],["vec",3]]]],[0,"parquet","polars::frame::ser","Reading Apache parquet files.Example",null,null],[3,"ParquetReader","polars::frame::ser::parquet","Read Apache parquet format into a DataFrame.",null,null],[11,"with_batch_size","","Set the size of the read buffer. Batch size is the amount…",63,[[]]],[8,"SerReader","polars::frame::ser","",null,null],[10,"new","","",64,[[]]],[10,"set_rechunk","","Rechunk to a single chunk after Reading file.",64,[[]]],[10,"with_ignore_parser_error","","Continue with next batch when a ParserError is encountered.",64,[[]]],[10,"finish","","Take the SerReader and return a parsed DataFrame.",64,[[],[["dataframe",3],["result",6]]]],[8,"SerWriter","","",null,null],[10,"new","","",65,[[]]],[10,"finish","","",65,[[["dataframe",3]],["result",6]]],[8,"ArrowReader","","",null,null],[10,"next","","",66,[[],[["arrowresult",6],["option",4]]]],[10,"schema","","",66,[[],[["arc",3],["schema",3]]]],[8,"IntoSeries","polars::frame","",null,null],[10,"into_series","","",67,[[],["series",4]]],[11,"new","","Create a DataFrame from a Vector of Series.",54,[[["intoseries",8],["vec",3]],["result",6]]],[11,"schema","","Get a reference to the DataFrame schema.",54,[[],["schema",3]]],[11,"get_columns","","Get a reference to the DataFrame columns.",54,[[],["vec",3]]],[11,"columns","","Get the column labels of the DataFrame.",54,[[],["vec",3]]],[11,"dtypes","","Get the data types of the columns in the DataFrame.",54,[[],[["arrowdatatype",4],["vec",3]]]],[11,"n_chunks","","The number of chunks per column",54,[[],["result",6]]],[11,"fields","","Get a reference to the schema fields of the DataFrame.",54,[[],[["field",3],["vec",3]]]],[11,"shape","","Get (width x height)",54,[[]]],[11,"width","","Get width of DataFrame",54,[[]]],[11,"height","","Get height of DataFrame",54,[[]]],[11,"hstack","","Add multiple Series to a DataFrame This expects the Series…",54,[[],["result",6]]],[11,"vstack","","Concatenate a DataFrame to this DataFrame",54,[[["dataframe",3]],["result",6]]],[11,"drop_in_place","","Remove column by name",54,[[],[["series",4],["result",6]]]],[11,"drop","","Drop a column by name. This is a pure method and will…",54,[[],["result",6]]],[11,"add_column","","Add a new column to this `DataFrame`.",54,[[["intoseries",8]],["result",6]]],[11,"with_column","","Create a new `DataFrame` with the column added.",54,[[["intoseries",8]],["result",6]]],[11,"get","","Get a row in the `DataFrame` Beware this is slow.",54,[[],[["option",4],["vec",3]]]],[11,"select_at_idx","","Select a series by index.",54,[[],[["series",4],["option",4]]]],[11,"find_idx_by_name","","Get column index of a series by name.",54,[[],["option",4]]],[11,"column","","Select a single column by name.",54,[[],[["result",6],["series",4]]]],[11,"select","","Select column(s) from this DataFrame and return a new…",54,[[],["result",6]]],[11,"select_series","","Select column(s) from this DataFrame and return them into…",54,[[],[["result",6],["vec",3]]]],[11,"filter","","Take DataFrame rows by a boolean mask.",54,[[["booleanchunked",6]],["result",6]]],[11,"take_iter","","Take DataFrame value by indexes from an iterator.",54,[[["option",4]],["result",6]]],[11,"take_iter_unchecked","","Take DataFrame values by indexes from an iterator. This…",54,[[["option",4]]]],[11,"take_opt_iter","","Take DataFrame values by indexes from an iterator that may…",54,[[["option",4]],["result",6]]],[11,"take_opt_iter_unchecked","","Take DataFrame values by indexes from an iterator that may…",54,[[["option",4]]]],[11,"take","","Take DataFrame rows by index values.",54,[[],["result",6]]],[11,"rename","","Rename a column in the DataFrame",54,[[],["result",6]]],[11,"sort_in_place","","Sort DataFrame in place by a column.",54,[[],["result",6]]],[11,"sort","","Return a sorted clone of this DataFrame.",54,[[],["result",6]]],[11,"replace","","Replace a column with a series.",54,[[["intoseries",8]],["result",6]]],[11,"replace_at_idx","","Replace column at index `idx` with a series.",54,[[["intoseries",8]],["result",6]]],[11,"apply","","Apply a closure to a column. This is the recommended way…",54,[[],["result",6]]],[11,"apply_at_idx","","Apply a closure to a column at index `idx`. This is the…",54,[[],["result",6]]],[11,"may_apply_at_idx","","Apply a closure that may fail to a column at index `idx`.…",54,[[],["result",6]]],[11,"may_apply","","Apply a closure that may fail to a column. This is the…",54,[[],["result",6]]],[11,"slice","","Slice the DataFrame along the rows.",54,[[],["result",6]]],[11,"head","","Get the head of the DataFrame",54,[[["option",4]]]],[11,"tail","","Get the tail of the DataFrame",54,[[["option",4]]]],[11,"as_record_batches","","Transform the underlying chunks in the DataFrame to Arrow…",54,[[],[["result",6],["vec",3]]]],[11,"iter_record_batches","","",54,[[]]],[11,"reverse","","Get a DataFrame with all the columns in reversed order",54,[[]]],[11,"shift","","Shift the values by a given period and fill the parts that…",54,[[],["result",6]]],[11,"fill_none","","Replace None values with one of the following strategies:",54,[[["fillnonestrategy",4]],["result",6]]],[11,"pipe","","Pipe different functions/ closure operations that work on…",54,[[],["result",6]]],[11,"pipe_mut","","Pipe different functions/ closure operations that work on…",54,[[],["result",6]]],[11,"pipe_with_args","","Pipe different functions/ closure operations that work on…",54,[[],["result",6]]],[0,"prelude","polars","Everything you need to get started with Polars.",null,null],[8,"ArrowPrimitiveType","polars::prelude","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",46,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",46,[[],["datatype",4]]],[10,"get_bit_width","","Returns the bit width of this primitive type.",46,[[]]],[10,"default_value","","Returns a default value of this primitive type.",46,[[]]],[3,"Field","","Contains the meta-data for a single relative type.",null,null],[3,"Schema","","Describes the meta-data of an ordered sequence of relative…",null,null],[8,"LhsNumOps","","",null,null],[16,"Output","","",68,null],[10,"add","","",68,[[["series",4]]]],[10,"sub","","",68,[[["series",4]]]],[10,"div","","",68,[[["series",4]]]],[10,"mul","","",68,[[["series",4]]]],[0,"testing","polars","Testing utilities.",null,null],[11,"series_equal","polars::series","Check if series are equal. Note that `None == None`…",0,[[["series",4]]]],[11,"series_equal_missing","","Check if all values in series are equal where `None ==…",0,[[["series",4]]]],[11,"frame_equal","polars::frame","Check if `DataFrames` are equal. Note that `None == None`…",54,[[["dataframe",3]]]],[11,"frame_equal_missing","","Check if all values in `DataFrames` are equal where `None…",54,[[["dataframe",3]]]],[14,"apply_method_all_series","polars","",null,null],[14,"apply_method_numeric_series","","",null,null],[14,"apply_method_numeric_series_and_return","","",null,null],[14,"exec_concurrent","","",null,null],[14,"match_arrow_data_type_apply_macro","","",null,null],[14,"apply_operand_on_chunkedarray_by_iter","","",null,null],[14,"as_result","","",null,null],[11,"from","polars::series","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","polars::chunked_array","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","polars::chunked_array::ops","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","polars::chunked_array::builder","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","polars::chunked_array::iterator","",69,[[]]],[11,"into","","",69,[[]]],[11,"into_iter","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"par_bridge","","",69,[[],["iterbridge",3]]],[11,"to_bytes","","",69,[[],["utf8charsplitter",3]]],[11,"to_units","","",69,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",69,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",69,[[],["utf16charmerger",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"into_iter","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"par_bridge","","",70,[[],["iterbridge",3]]],[11,"to_bytes","","",70,[[],["utf8charsplitter",3]]],[11,"to_units","","",70,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",70,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",70,[[],["utf16charmerger",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"into_iter","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"par_bridge","","",71,[[],["iterbridge",3]]],[11,"to_bytes","","",71,[[],["utf8charsplitter",3]]],[11,"to_units","","",71,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",71,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",71,[[],["utf16charmerger",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"into_iter","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"par_bridge","","",72,[[],["iterbridge",3]]],[11,"to_bytes","","",72,[[],["utf8charsplitter",3]]],[11,"to_units","","",72,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",72,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",72,[[],["utf16charmerger",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"into_iter","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"par_bridge","","",73,[[],["iterbridge",3]]],[11,"to_bytes","","",73,[[],["utf8charsplitter",3]]],[11,"to_units","","",73,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",73,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",73,[[],["utf16charmerger",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"into_iter","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"par_bridge","","",74,[[],["iterbridge",3]]],[11,"to_bytes","","",74,[[],["utf8charsplitter",3]]],[11,"to_units","","",74,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",74,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",74,[[],["utf16charmerger",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"into_iter","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"par_bridge","","",75,[[],["iterbridge",3]]],[11,"to_bytes","","",75,[[],["utf8charsplitter",3]]],[11,"to_units","","",75,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",75,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",75,[[],["utf16charmerger",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"par_bridge","","",76,[[],["iterbridge",3]]],[11,"to_bytes","","",76,[[],["utf8charsplitter",3]]],[11,"to_units","","",76,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",76,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",76,[[],["utf16charmerger",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"into_iter","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"par_bridge","","",77,[[],["iterbridge",3]]],[11,"to_bytes","","",77,[[],["utf8charsplitter",3]]],[11,"to_units","","",77,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",77,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",77,[[],["utf16charmerger",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"into_iter","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"par_bridge","","",78,[[],["iterbridge",3]]],[11,"to_bytes","","",78,[[],["utf8charsplitter",3]]],[11,"to_units","","",78,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",78,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",78,[[],["utf16charmerger",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"into_iter","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"par_bridge","","",79,[[],["iterbridge",3]]],[11,"to_bytes","","",79,[[],["utf8charsplitter",3]]],[11,"to_units","","",79,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",79,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",79,[[],["utf16charmerger",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"into_iter","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"par_bridge","","",80,[[],["iterbridge",3]]],[11,"to_bytes","","",80,[[],["utf8charsplitter",3]]],[11,"to_units","","",80,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",80,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",80,[[],["utf16charmerger",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"into_iter","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"par_bridge","","",81,[[],["iterbridge",3]]],[11,"to_bytes","","",81,[[],["utf8charsplitter",3]]],[11,"to_units","","",81,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",81,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",81,[[],["utf16charmerger",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"into_iter","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"par_bridge","","",82,[[],["iterbridge",3]]],[11,"to_bytes","","",82,[[],["utf8charsplitter",3]]],[11,"to_units","","",82,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",82,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",82,[[],["utf16charmerger",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"into_iter","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"par_bridge","","",83,[[],["iterbridge",3]]],[11,"to_bytes","","",83,[[],["utf8charsplitter",3]]],[11,"to_units","","",83,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",83,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",83,[[],["utf16charmerger",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"into_iter","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"par_bridge","","",84,[[],["iterbridge",3]]],[11,"to_bytes","","",84,[[],["utf8charsplitter",3]]],[11,"to_units","","",84,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",84,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",84,[[],["utf16charmerger",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"into_iter","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"par_bridge","","",85,[[],["iterbridge",3]]],[11,"to_bytes","","",85,[[],["utf8charsplitter",3]]],[11,"to_units","","",85,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",85,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",85,[[],["utf16charmerger",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"into_iter","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"par_bridge","","",86,[[],["iterbridge",3]]],[11,"to_bytes","","",86,[[],["utf8charsplitter",3]]],[11,"to_units","","",86,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",86,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",86,[[],["utf16charmerger",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"into_iter","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"par_bridge","","",87,[[],["iterbridge",3]]],[11,"to_bytes","","",87,[[],["utf8charsplitter",3]]],[11,"to_units","","",87,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",87,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",87,[[],["utf16charmerger",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"into_iter","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"par_bridge","","",28,[[],["iterbridge",3]]],[11,"to_bytes","","",28,[[],["utf8charsplitter",3]]],[11,"to_units","","",28,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",28,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",28,[[],["utf16charmerger",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"par_bridge","","",29,[[],["iterbridge",3]]],[11,"to_bytes","","",29,[[],["utf8charsplitter",3]]],[11,"to_units","","",29,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",29,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",29,[[],["utf16charmerger",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"par_bridge","","",30,[[],["iterbridge",3]]],[11,"to_bytes","","",30,[[],["utf8charsplitter",3]]],[11,"to_units","","",30,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",30,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",30,[[],["utf16charmerger",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"par_bridge","","",31,[[],["iterbridge",3]]],[11,"to_bytes","","",31,[[],["utf8charsplitter",3]]],[11,"to_units","","",31,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",31,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",31,[[],["utf16charmerger",3]]],[11,"from","polars::chunked_array::take","",88,[[]]],[11,"into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","polars::datatypes","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"equivalent","","",45,[[]]],[11,"vzip","","",45,[[]]],[11,"get_data_type","","",97,[[],["datatype",4]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"get_data_type","","",98,[[],["datatype",4]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"get_data_type","","",99,[[],["datatype",4]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"vzip","","",99,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"equivalent","","",47,[[]]],[11,"vzip","","",47,[[]]],[11,"get_data_type","","",100,[[],["datatype",4]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"vzip","","",100,[[]]],[11,"get_data_type","","",101,[[],["datatype",4]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"vzip","","",101,[[]]],[11,"get_data_type","","",102,[[],["datatype",4]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"vzip","","",102,[[]]],[11,"get_data_type","","",103,[[],["datatype",4]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"vzip","","",103,[[]]],[11,"get_data_type","","",104,[[],["datatype",4]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"get_data_type","","",105,[[],["datatype",4]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"get_data_type","","",106,[[],["datatype",4]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"vzip","","",106,[[]]],[11,"get_data_type","","",107,[[],["datatype",4]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"get_data_type","","",108,[[],["datatype",4]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"get_data_type","","",109,[[],["datatype",4]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"get_data_type","","",110,[[],["datatype",4]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"equivalent","","",48,[[]]],[11,"vzip","","",48,[[]]],[11,"get_data_type","","",111,[[],["datatype",4]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"vzip","","",111,[[]]],[11,"get_data_type","","",112,[[],["datatype",4]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"vzip","","",112,[[]]],[11,"get_data_type","","",113,[[],["datatype",4]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"vzip","","",113,[[]]],[11,"get_data_type","","",114,[[],["datatype",4]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"vzip","","",114,[[]]],[11,"get_data_type","","",115,[[],["datatype",4]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"vzip","","",115,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"equivalent","","",49,[[]]],[11,"vzip","","",49,[[]]],[11,"get_data_type","","",116,[[],["datatype",4]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"vzip","","",116,[[]]],[11,"get_data_type","","",117,[[],["datatype",4]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"vzip","","",117,[[]]],[11,"get_data_type","","",118,[[],["datatype",4]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"vzip","","",118,[[]]],[11,"get_data_type","","",119,[[],["datatype",4]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"vzip","","",119,[[]]],[11,"get_data_type","","",120,[[],["datatype",4]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"vzip","","",120,[[]]],[11,"get_data_type","","",121,[[],["datatype",4]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"vzip","","",121,[[]]],[11,"get_data_type","","",122,[[],["datatype",4]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"vzip","","",122,[[]]],[11,"get_data_type","","",123,[[],["datatype",4]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"vzip","","",123,[[]]],[11,"get_data_type","","",124,[[],["datatype",4]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"vzip","","",124,[[]]],[11,"get_data_type","","",125,[[],["datatype",4]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","polars::error","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_string","","",53,[[],["string",3]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","polars::frame","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"to_string","","",54,[[],["string",3]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"utf8char_indices","","",54,[[],["utf8chardecoder",3]]],[11,"utf16char_indices","","",54,[[],["utf16chardecoder",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"into_iter","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"par_bridge","","",126,[[],["iterbridge",3]]],[11,"to_bytes","","",126,[[],["utf8charsplitter",3]]],[11,"to_units","","",126,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",126,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",126,[[],["utf16charmerger",3]]],[11,"from","polars::frame::group_by","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","polars::frame::ser::csv","",127,[[]]],[11,"into","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","polars::frame::ser::ipc","",129,[[]]],[11,"into","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"vzip","","",129,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","polars::frame::ser::json","",130,[[]]],[11,"into","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"vzip","","",130,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from","polars::frame::ser::parquet","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","polars::prelude","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"to_string","","",131,[[],["string",3]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"equivalent","","",131,[[]]],[11,"vzip","","",131,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"to_string","","",132,[[],["string",3]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"equivalent","","",132,[[]]],[11,"vzip","","",132,[[]]],[11,"get_data_type","polars::datatypes","",114,[[],["datatype",4]]],[11,"get_bit_width","","",114,[[]]],[11,"default_value","","",114,[[]]],[11,"get_data_type","","",97,[[],["datatype",4]]],[11,"get_bit_width","","",97,[[]]],[11,"default_value","","",97,[[]]],[11,"get_data_type","","",115,[[],["datatype",4]]],[11,"get_bit_width","","",115,[[]]],[11,"default_value","","",115,[[]]],[11,"get_data_type","","",100,[[],["datatype",4]]],[11,"get_bit_width","","",100,[[]]],[11,"default_value","","",100,[[]]],[11,"get_data_type","","",119,[[],["datatype",4]]],[11,"get_bit_width","","",119,[[]]],[11,"default_value","","",119,[[]]],[11,"get_data_type","","",120,[[],["datatype",4]]],[11,"get_bit_width","","",120,[[]]],[11,"default_value","","",120,[[]]],[11,"get_data_type","","",118,[[],["datatype",4]]],[11,"get_bit_width","","",118,[[]]],[11,"default_value","","",118,[[]]],[11,"get_data_type","","",110,[[],["datatype",4]]],[11,"get_bit_width","","",110,[[]]],[11,"default_value","","",110,[[]]],[11,"get_data_type","","",117,[[],["datatype",4]]],[11,"get_bit_width","","",117,[[]]],[11,"default_value","","",117,[[]]],[11,"get_data_type","","",102,[[],["datatype",4]]],[11,"get_bit_width","","",102,[[]]],[11,"default_value","","",102,[[]]],[11,"get_data_type","","",101,[[],["datatype",4]]],[11,"get_bit_width","","",101,[[]]],[11,"default_value","","",101,[[]]],[11,"get_data_type","","",106,[[],["datatype",4]]],[11,"get_bit_width","","",106,[[]]],[11,"default_value","","",106,[[]]],[11,"get_data_type","","",113,[[],["datatype",4]]],[11,"get_bit_width","","",113,[[]]],[11,"default_value","","",113,[[]]],[11,"get_data_type","","",122,[[],["datatype",4]]],[11,"get_bit_width","","",122,[[]]],[11,"default_value","","",122,[[]]],[11,"get_data_type","","",98,[[],["datatype",4]]],[11,"get_bit_width","","",98,[[]]],[11,"default_value","","",98,[[]]],[11,"get_data_type","","",123,[[],["datatype",4]]],[11,"get_bit_width","","",123,[[]]],[11,"default_value","","",123,[[]]],[11,"get_data_type","","",112,[[],["datatype",4]]],[11,"get_bit_width","","",112,[[]]],[11,"default_value","","",112,[[]]],[11,"get_data_type","","",103,[[],["datatype",4]]],[11,"get_bit_width","","",103,[[]]],[11,"default_value","","",103,[[]]],[11,"get_data_type","","",108,[[],["datatype",4]]],[11,"get_bit_width","","",108,[[]]],[11,"default_value","","",108,[[]]],[11,"get_data_type","","",107,[[],["datatype",4]]],[11,"get_bit_width","","",107,[[]]],[11,"default_value","","",107,[[]]],[11,"get_data_type","","",116,[[],["datatype",4]]],[11,"get_bit_width","","",116,[[]]],[11,"default_value","","",116,[[]]],[11,"get_data_type","","",99,[[],["datatype",4]]],[11,"get_bit_width","","",99,[[]]],[11,"default_value","","",99,[[]]],[11,"get_data_type","","",121,[[],["datatype",4]]],[11,"get_bit_width","","",121,[[]]],[11,"default_value","","",121,[[]]],[11,"get_data_type","","",104,[[],["datatype",4]]],[11,"get_bit_width","","",104,[[]]],[11,"default_value","","",104,[[]]],[11,"get_data_type","","",111,[[],["datatype",4]]],[11,"get_bit_width","","",111,[[]]],[11,"default_value","","",111,[[]]],[11,"get_data_type","","",105,[[],["datatype",4]]],[11,"get_bit_width","","",105,[[]]],[11,"default_value","","",105,[[]]],[11,"get_data_type","","",109,[[],["datatype",4]]],[11,"get_bit_width","","",109,[[]]],[11,"default_value","","",109,[[]]],[11,"default","polars::frame::ser::json","",130,[[],["readerbuilder",3]]],[11,"default","polars::frame::ser::csv","",127,[[],["readerbuilder",3]]],[11,"default","","",128,[[],["writerbuilder",3]]],[11,"serialize","polars::datatypes","",48,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","polars::prelude","",131,[[],["result",4]]],[11,"serialize","polars::datatypes","",49,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","polars::prelude","",132,[[],["result",4]]],[11,"partial_cmp","polars::datatypes","",49,[[["timeunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",47,[[["dateunit",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",45,[[["datatype",4]],[["option",4],["ordering",4]]]],[11,"lt","","",45,[[["datatype",4]]]],[11,"le","","",45,[[["datatype",4]]]],[11,"gt","","",45,[[["datatype",4]]]],[11,"ge","","",45,[[["datatype",4]]]],[11,"partial_cmp","polars::prelude","",131,[[["field",3]],[["option",4],["ordering",4]]]],[11,"lt","","",131,[[["field",3]]]],[11,"le","","",131,[[["field",3]]]],[11,"gt","","",131,[[["field",3]]]],[11,"ge","","",131,[[["field",3]]]],[11,"partial_cmp","polars::datatypes","",48,[[["intervalunit",4]],[["option",4],["ordering",4]]]],[11,"cmp","","",47,[[["dateunit",4]],["ordering",4]]],[11,"cmp","","",48,[[["intervalunit",4]],["ordering",4]]],[11,"cmp","polars::prelude","",131,[[["field",3]],["ordering",4]]],[11,"cmp","polars::datatypes","",49,[[["timeunit",4]],["ordering",4]]],[11,"cmp","","",45,[[["datatype",4]],["ordering",4]]],[11,"from","polars::prelude","",131,[[["field",3]],["field",3]]],[11,"eq","","",132,[[["schema",3]]]],[11,"ne","","",132,[[["schema",3]]]],[11,"eq","polars::datatypes","",47,[[["dateunit",4]]]],[11,"eq","","",49,[[["timeunit",4]]]],[11,"eq","","",48,[[["intervalunit",4]]]],[11,"eq","polars::prelude","",131,[[["field",3]]]],[11,"ne","","",131,[[["field",3]]]],[11,"eq","polars::datatypes","",45,[[["datatype",4]]]],[11,"ne","","",45,[[["datatype",4]]]],[11,"get_time_unit","","",119,[[],["timeunit",4]]],[11,"get_time_unit","","",118,[[],["timeunit",4]]],[11,"get_time_unit","","",117,[[],["timeunit",4]]],[11,"get_time_unit","","",116,[[],["timeunit",4]]],[11,"fmt","","",106,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",109,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",104,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",121,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",45,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::json","",130,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",100,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",114,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::prelude","",131,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",110,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",103,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",48,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",99,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",123,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",98,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",120,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",116,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",105,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",108,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",113,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",115,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",107,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",97,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",119,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",101,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::csv","",127,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",117,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::csv","",128,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",102,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",122,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",111,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",118,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::prelude","",132,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",47,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",112,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","polars::prelude","",131,[[],["field",3]]],[11,"clone","polars::datatypes","",45,[[],["datatype",4]]],[11,"clone","","",49,[[],["timeunit",4]]],[11,"clone","","",47,[[],["dateunit",4]]],[11,"clone","polars::prelude","",132,[[],["schema",3]]],[11,"clone","polars::datatypes","",48,[[],["intervalunit",4]]],[11,"fmt","polars::prelude","",131,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",132,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","polars::datatypes","",48,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",49,[[]]],[11,"hash","polars::prelude","",131,[[]]],[11,"hash","polars::datatypes","",47,[[]]],[11,"deserialize","","",49,[[],[["timeunit",4],["result",4]]]],[11,"deserialize","","",47,[[],[["dateunit",4],["result",4]]]],[11,"deserialize","","",48,[[],[["result",4],["intervalunit",4]]]],[11,"deserialize","polars::prelude","",132,[[],[["schema",3],["result",4]]]],[11,"deserialize","","",131,[[],[["field",3],["result",4]]]],[11,"deserialize","polars::datatypes","",45,[[],[["datatype",4],["result",4]]]],[11,"new","polars::series","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"new","","",0,[[]]],[11,"get","polars::chunked_array","",33,[[],["option",4]]],[11,"get_unchecked","","",33,[[]]],[11,"get","polars","",133,[[],["option",4]]],[11,"get_unchecked","","",133,[[]]],[11,"get","polars::chunked_array::take","",34,[[],["option",4]]],[11,"get_unchecked","","",34,[[]]],[11,"get","","",88,[[],["option",4]]],[11,"get_unchecked","","",88,[[]]],[11,"get","","",89,[[],["option",4]]],[11,"get_unchecked","","",89,[[]]],[11,"get","","",90,[[],["option",4]]],[11,"get_unchecked","","",90,[[]]],[11,"get","","",91,[[],["option",4]]],[11,"get_unchecked","","",91,[[]]],[11,"get","","",92,[[],["option",4]]],[11,"get_unchecked","","",92,[[]]],[11,"get","","",93,[[],["option",4]]],[11,"get_unchecked","","",93,[[]]],[11,"get","","",94,[[],["option",4]]],[11,"get_unchecked","","",94,[[]]],[11,"get","","",95,[[],["option",4]]],[11,"get_unchecked","","",95,[[]]],[11,"get","","",96,[[],["option",4]]],[11,"get_unchecked","","",96,[[]]],[11,"take","polars::chunked_array","",33,[[["option",4]],["result",6]]],[11,"take_unchecked","","",33,[[["option",4]]]],[11,"take_opt","","",33,[[["option",4]],["result",6]]],[11,"take_opt_unchecked","","",33,[[["option",4]]]],[11,"take","polars","",134,[[["option",4]],["result",6]]],[11,"take_unchecked","","",134,[[["option",4]]]],[11,"take_opt","","",134,[[["option",4]],["result",6]]],[11,"take_opt_unchecked","","",134,[[["option",4]]]],[11,"take","","",135,[[["option",4]],["result",6]]],[11,"take_unchecked","","",135,[[["option",4]]]],[11,"take_opt","","",135,[[["option",4]],["result",6]]],[11,"take_opt_unchecked","","",135,[[["option",4]]]],[11,"take","","",133,[[["option",4]],["result",6]]],[11,"take_unchecked","","",133,[[["option",4]]]],[11,"take_opt","","",133,[[["option",4]],["result",6]]],[11,"take_opt_unchecked","","",133,[[["option",4]]]],[11,"set_at_idx","polars::chunked_array","",33,[[["option",4]],["result",6]]],[11,"set_at_idx_with","","",33,[[],["result",6]]],[11,"set","","",33,[[["option",4],["booleanchunked",6]],["result",6]]],[11,"set_with","","",33,[[["booleanchunked",6]],["result",6]]],[11,"set_at_idx","polars","",135,[[["option",4]],["result",6]]],[11,"set_at_idx_with","","",135,[[],["result",6]]],[11,"set","","",135,[[["option",4],["booleanchunked",6]],["result",6]]],[11,"set_with","","",135,[[["booleanchunked",6]],["result",6]]],[11,"cast","polars::chunked_array","",33,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","polars","",135,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","","",134,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","","",133,[[],[["result",6],["chunkedarray",3]]]],[11,"apply","polars::chunked_array","Chooses the fastest path for closure application. Null…",33,[[]]],[11,"apply","polars","",134,[[]]],[11,"apply","","",135,[[]]],[11,"sum","polars::chunked_array","",33,[[],["option",4]]],[11,"min","","",33,[[],["option",4]]],[11,"max","","",33,[[],["option",4]]],[11,"mean","","",33,[[],["option",4]]],[11,"median","","",33,[[],["option",4]]],[11,"sum","polars","Returns `None` if the array is empty or only contains null…",134,[[],["option",4]]],[11,"min","","",134,[[],["option",4]]],[11,"max","","",134,[[],["option",4]]],[11,"mean","","",134,[[],["option",4]]],[11,"median","","",134,[[],["option",4]]],[11,"eq_missing","polars::series","",0,[[["series",4]],["booleanchunked",6]]],[11,"eq","","Create a boolean mask by checking for equality.",0,[[["series",4]],["booleanchunked",6]]],[11,"neq","","Create a boolean mask by checking for inequality.",0,[[["series",4]],["booleanchunked",6]]],[11,"gt","","Create a boolean mask by checking if lhs > rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"gt_eq","","Create a boolean mask by checking if lhs >= rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"lt","","Create a boolean mask by checking if lhs < rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"lt_eq","","Create a boolean mask by checking if lhs <= rhs.",0,[[["series",4]],["booleanchunked",6]]],[11,"eq_missing","","",0,[[],["booleanchunked",6]]],[11,"eq","","",0,[[],["booleanchunked",6]]],[11,"neq","","",0,[[],["booleanchunked",6]]],[11,"gt","","",0,[[],["booleanchunked",6]]],[11,"gt_eq","","",0,[[],["booleanchunked",6]]],[11,"lt","","",0,[[],["booleanchunked",6]]],[11,"lt_eq","","",0,[[],["booleanchunked",6]]],[11,"eq_missing","","",0,[[],["booleanchunked",6]]],[11,"eq","","",0,[[],["booleanchunked",6]]],[11,"neq","","",0,[[],["booleanchunked",6]]],[11,"gt","","",0,[[],["booleanchunked",6]]],[11,"gt_eq","","",0,[[],["booleanchunked",6]]],[11,"lt","","",0,[[],["booleanchunked",6]]],[11,"lt_eq","","",0,[[],["booleanchunked",6]]],[11,"eq_missing","polars::chunked_array","",33,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"eq","","",33,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"neq","","",33,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt","","",33,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt_eq","","",33,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt","","",33,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt_eq","","",33,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"eq_missing","polars","",134,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"eq","","",134,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"neq","","",134,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt","","",134,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",134,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt","","",134,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",134,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"eq_missing","","",135,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"eq","","",135,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"neq","","",135,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt","","",135,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",135,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt","","",135,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",135,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"eq_missing","polars::chunked_array","",33,[[],["booleanchunked",6]]],[11,"eq","","",33,[[],["booleanchunked",6]]],[11,"neq","","",33,[[],["booleanchunked",6]]],[11,"gt","","",33,[[],["booleanchunked",6]]],[11,"gt_eq","","",33,[[],["booleanchunked",6]]],[11,"lt","","",33,[[],["booleanchunked",6]]],[11,"lt_eq","","",33,[[],["booleanchunked",6]]],[11,"eq_missing","polars","",135,[[],["booleanchunked",6]]],[11,"eq","","",135,[[],["booleanchunked",6]]],[11,"neq","","",135,[[],["booleanchunked",6]]],[11,"gt","","",135,[[],["booleanchunked",6]]],[11,"gt_eq","","",135,[[],["booleanchunked",6]]],[11,"lt","","",135,[[],["booleanchunked",6]]],[11,"lt_eq","","",135,[[],["booleanchunked",6]]],[11,"eq_missing","","",133,[[["largelistchunked",6]],["booleanchunked",6]]],[11,"eq","","",133,[[["largelistchunked",6]],["booleanchunked",6]]],[11,"neq","","",133,[[["largelistchunked",6]],["booleanchunked",6]]],[11,"gt","","",133,[[["largelistchunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",133,[[["largelistchunked",6]],["booleanchunked",6]]],[11,"lt","","",133,[[["largelistchunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",133,[[["largelistchunked",6]],["booleanchunked",6]]],[11,"unique","","",133,[[],[["largelisttype",3],["chunkedarray",3]]]],[11,"arg_unique","","",133,[[],["vec",3]]],[11,"unique","polars::chunked_array","",33,[[]]],[11,"arg_unique","","",33,[[],["vec",3]]],[11,"unique","polars","",135,[[]]],[11,"arg_unique","","",135,[[],["vec",3]]],[11,"unique","","",134,[[]]],[11,"arg_unique","","",134,[[],["vec",3]]],[11,"sort","polars::chunked_array","",33,[[],["chunkedarray",3]]],[11,"sort_in_place","","",33,[[]]],[11,"argsort","","",33,[[],["vec",3]]],[11,"sort","polars","",135,[[],["utf8chunked",6]]],[11,"sort_in_place","","",135,[[]]],[11,"argsort","","",135,[[],["vec",3]]],[11,"sort","","",133,[[]]],[11,"sort_in_place","","",133,[[]]],[11,"argsort","","",133,[[],["vec",3]]],[11,"sort","","",134,[[],["booleanchunked",6]]],[11,"sort_in_place","","",134,[[]]],[11,"argsort","","",134,[[],["vec",3]]],[11,"fill_none","polars::chunked_array","",33,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",33,[[],["result",6]]],[11,"fill_none","polars","",134,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",134,[[],["result",6]]],[11,"fill_none","","",135,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",135,[[],["result",6]]],[11,"fill_none","","",133,[[["fillnonestrategy",4]],["result",6]]],[11,"fill_none_with_value","","",133,[[["series",4]],["result",6]]],[11,"full","polars::chunked_array","",33,[[]]],[11,"full","polars","",135,[[]]],[11,"reverse","polars::chunked_array","",33,[[],["chunkedarray",3]]],[11,"reverse","polars","",134,[[]]],[11,"reverse","","",135,[[]]],[11,"reverse","","",133,[[]]],[11,"filter","polars::chunked_array","",33,[[["booleanchunked",6]],[["chunkedarray",3],["result",6]]]],[11,"filter","polars","",133,[[["booleanchunked",6]],[["largelistchunked",6],["result",6]]]],[11,"shift","polars::chunked_array","",33,[[["option",4]],[["chunkedarray",3],["result",6]]]],[11,"shift","polars","",134,[[["option",4]],[["booleanchunked",6],["result",6]]]],[11,"shift","","",135,[[["option",4]],[["result",6],["utf8chunked",6]]]],[11,"shift","","",133,[[["option",4]],[["largelistchunked",6],["result",6]]]],[11,"pow_f32","polars::chunked_array","",33,[[],["float32chunked",6]]],[11,"pow_f64","","",33,[[],["float64chunked",6]]],[11,"new_from_slice","","",33,[[]]],[11,"new_from_opt_slice","","",33,[[]]],[11,"new_from_opt_iter","","",33,[[],["chunkedarray",3]]],[11,"new_from_iter","","Create a new ChunkedArray from an iterator.",33,[[],["chunkedarray",3]]],[11,"new_from_slice","polars","",135,[[]]],[11,"new_from_opt_slice","","",135,[[]]],[11,"new_from_opt_iter","","",135,[[]]],[11,"new_from_iter","","Create a new ChunkedArray from an iterator.",135,[[]]],[11,"append_opt_series","polars::chunked_array::builder","",22,[[["option",4]]]],[11,"append_series","","",22,[[["series",4]]]],[11,"finish","","",22,[[],["largelistchunked",6]]],[11,"append_opt_series","","",26,[[["option",4]]]],[11,"append_series","","",26,[[["series",4]]]],[11,"finish","","",26,[[],["largelistchunked",6]]],[11,"rechunk","polars::chunked_array","",33,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",33,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rechunk","polars","",134,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",134,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rechunk","","",135,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",135,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"rechunk","","",133,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",133,[[["chunkedarray",3]],[["result",6],["option",4]]]],[11,"new_from_naive_time","","",136,[[]]],[11,"parse_from_str_slice","","",136,[[]]],[11,"new_from_naive_time","","",137,[[]]],[11,"parse_from_str_slice","","",137,[[]]],[11,"new_from_naive_time","","",138,[[]]],[11,"parse_from_str_slice","","",138,[[]]],[11,"new_from_naive_time","","",139,[[]]],[11,"parse_from_str_slice","","",139,[[]]],[11,"as_naive_time","","",139,[[],[["vec",3],["option",4]]]],[11,"as_naive_time","","",138,[[],[["vec",3],["option",4]]]],[11,"as_naive_time","","",136,[[],[["vec",3],["option",4]]]],[11,"as_naive_time","","",137,[[],[["vec",3],["option",4]]]],[11,"new_from_naive_datetime","","",140,[[]]],[11,"parse_from_str_slice","","",140,[[]]],[11,"new_from_naive_datetime","","",141,[[]]],[11,"parse_from_str_slice","","",141,[[]]],[11,"new_from_naive_datetime","","",142,[[]]],[11,"parse_from_str_slice","","",142,[[]]],[11,"new_from_naive_datetime","","",143,[[]]],[11,"parse_from_str_slice","","",143,[[]]],[11,"new_from_naive_datetime","","",144,[[]]],[11,"parse_from_str_slice","","",144,[[]]],[11,"new_from_naive_date","","",145,[[]]],[11,"parse_from_str_slice","","",145,[[]]],[11,"as_naive_datetime","","",145,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",140,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",141,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",142,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",143,[[],[["option",4],["vec",3]]]],[11,"as_naive_datetime","","",144,[[],[["option",4],["vec",3]]]],[11,"as_naive_date","","",145,[[],[["vec",3],["option",4]]]],[11,"value_counts","polars::chunked_array","",33,[[],[["option",4],["buildhasherdefault",3],["hashmap",3]]]],[11,"downcast_chunks","","",33,[[],[["vec",3],["primitivearray",3]]]],[11,"downcast_chunks","polars","",135,[[],[["stringarray",3],["vec",3]]]],[11,"downcast_chunks","","",134,[[],[["vec",3],["booleanarray",6]]]],[11,"downcast_chunks","","",133,[[],[["vec",3],["largelistarray",3]]]],[11,"get_data_type","polars::datatypes","",124,[[],["arrowdatatype",4]]],[11,"get_data_type","","",125,[[],["arrowdatatype",4]]],[11,"to_str","","",45,[[],["string",3]]],[11,"hash_join_inner","polars::chunked_array","",33,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_left","","",33,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_outer","","",33,[[["chunkedarray",3]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"hash_join_inner","polars","",134,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_left","","",134,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_outer","","",134,[[["booleanchunked",6]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"hash_join_inner","","",135,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_left","","",135,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_outer","","",135,[[["utf8chunked",6]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"new","polars::frame::ser::csv","Create a new CsvReader from a file/ stream",60,[[]]],[11,"set_rechunk","","Rechunk to one contiguous chunk of memory after all data…",60,[[]]],[11,"with_ignore_parser_error","","Continue with next batch when a ParserError is encountered.",60,[[]]],[11,"finish","","Read the file and create the DataFrame.",60,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::ipc","",129,[[]]],[11,"set_rechunk","","",129,[[]]],[11,"with_ignore_parser_error","","",129,[[]]],[11,"finish","","",129,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::json","",62,[[]]],[11,"with_ignore_parser_error","","",62,[[]]],[11,"set_rechunk","","",62,[[]]],[11,"finish","","",62,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::parquet","",63,[[]]],[11,"set_rechunk","","",63,[[]]],[11,"with_ignore_parser_error","","",63,[[]]],[11,"finish","","",63,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::csv","",59,[[]]],[11,"finish","","",59,[[["dataframe",3]],["result",6]]],[11,"new","polars::frame::ser::ipc","",61,[[]]],[11,"finish","","",61,[[["dataframe",3]],["result",6]]],[11,"into_series","polars::series","",0,[[],["series",4]]],[11,"into_series","polars::chunked_array","",33,[[],["series",4]]],[11,"as_mut","polars::series","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_mut","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","","",0,[[],["chunkedarray",3]]],[11,"as_ref","polars::chunked_array","",33,[[],["chunkedarray",3]]],[11,"from","polars::series","",0,[[["chunkedarray",3],["uint8type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["uint16type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["uint32type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["uint64type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["int8type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["int16type",3]],["series",4]]],[11,"from","","",0,[[["int32type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["int64type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["float32type",3]],["series",4]]],[11,"from","","",0,[[["float64type",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["utf8type",3]],["series",4]]],[11,"from","","",0,[[["booleantype",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["date32type",3]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["date64type",3]],["series",4]]],[11,"from","","",0,[[["time32millisecondchunked",6]],["series",4]]],[11,"from","","",0,[[["time32secondchunked",6]],["series",4]]],[11,"from","","",0,[[["chunkedarray",3],["time64nanosecondtype",3]],["series",4]]],[11,"from","","",0,[[["time64microsecondtype",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["durationnanosecondtype",3],["chunkedarray",3]],["series",4]]],[11,"from","","",0,[[["durationmicrosecondchunked",6]],["series",4]]],[11,"from","","",0,[[["durationmillisecondchunked",6]],["series",4]]],[11,"from","","",0,[[["durationsecondchunked",6]],["series",4]]],[11,"from","","",0,[[["intervaldaytimechunked",6]],["series",4]]],[11,"from","","",0,[[["intervalyearmonthchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampnanosecondchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampmicrosecondchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampmillisecondchunked",6]],["series",4]]],[11,"from","","",0,[[["timestampsecondchunked",6]],["series",4]]],[11,"from","","",0,[[["largelistchunked",6]],["series",4]]],[11,"from","","",0,[[]]],[11,"from","polars::error","",53,[[["arrowerror",4]]]],[11,"from","","",53,[[["parqueterror",4]]]],[11,"next_back","polars::chunked_array::iterator","",69,[[],["option",4]]],[11,"next_back","","",70,[[],["option",4]]],[11,"next_back","","",71,[[],["option",4]]],[11,"next_back","","",72,[[],["option",4]]],[11,"next_back","","",28,[[],["option",4]]],[11,"next_back","","",74,[[],["option",4]]],[11,"next_back","","",75,[[],["option",4]]],[11,"next_back","","",76,[[],["option",4]]],[11,"next_back","","",77,[[],["option",4]]],[11,"next_back","","",29,[[],["option",4]]],[11,"next_back","","",79,[[],["option",4]]],[11,"next_back","","",80,[[],["option",4]]],[11,"next_back","","",81,[[],["option",4]]],[11,"next_back","","",82,[[],["option",4]]],[11,"next_back","","",30,[[],["option",4]]],[11,"next_back","","",84,[[],["option",4]]],[11,"next_back","","",85,[[],["option",4]]],[11,"next_back","","",86,[[],["option",4]]],[11,"next_back","","",87,[[],["option",4]]],[11,"next_back","","",31,[[],["option",4]]],[11,"next","","",69,[[],["option",4]]],[11,"size_hint","","",69,[[]]],[11,"next","","",70,[[],["option",4]]],[11,"size_hint","","",70,[[]]],[11,"next","","",71,[[],["option",4]]],[11,"size_hint","","",71,[[]]],[11,"next","","",72,[[],["option",4]]],[11,"size_hint","","",72,[[]]],[11,"next","","",28,[[],["option",4]]],[11,"size_hint","","",28,[[]]],[11,"next","","",73,[[],["option",4]]],[11,"size_hint","","",73,[[]]],[11,"next","","",74,[[],["option",4]]],[11,"size_hint","","",74,[[]]],[11,"next","","",75,[[],["option",4]]],[11,"size_hint","","",75,[[]]],[11,"next","","",76,[[],["option",4]]],[11,"size_hint","","",76,[[]]],[11,"next","","",77,[[],["option",4]]],[11,"size_hint","","",77,[[]]],[11,"next","","",29,[[],["option",4]]],[11,"size_hint","","",29,[[]]],[11,"next","","",78,[[],["option",4]]],[11,"size_hint","","",78,[[]]],[11,"next","","",79,[[],["option",4]]],[11,"size_hint","","",79,[[]]],[11,"next","","",80,[[],["option",4]]],[11,"size_hint","","",80,[[]]],[11,"next","","",81,[[],["option",4]]],[11,"size_hint","","",81,[[]]],[11,"next","","",82,[[],["option",4]]],[11,"size_hint","","",82,[[]]],[11,"next","","",30,[[],["option",4]]],[11,"size_hint","","",30,[[]]],[11,"next","","",83,[[],["option",4]]],[11,"size_hint","","",83,[[]]],[11,"next","","",84,[[],["option",4]]],[11,"size_hint","","",84,[[]]],[11,"next","","",85,[[],["option",4]]],[11,"size_hint","","",85,[[]]],[11,"next","","",86,[[],["option",4]]],[11,"size_hint","","",86,[[]]],[11,"next","","",87,[[],["option",4]]],[11,"size_hint","","",87,[[]]],[11,"next","","",31,[[],["option",4]]],[11,"size_hint","","",31,[[]]],[11,"next","polars::frame","",126,[[],["option",4]]],[11,"clone","polars::series","",0,[[],["series",4]]],[11,"clone","polars::chunked_array::ops","",2,[[],["fillnonestrategy",4]]],[11,"clone","polars::chunked_array","",33,[[]]],[11,"clone","polars::frame::group_by","",55,[[],["groupby",3]]],[11,"clone","polars::frame","",54,[[],["dataframe",3]]],[11,"eq","polars::datatypes","",50,[[]]],[11,"deref","polars::chunked_array::builder","",19,[[]]],[11,"deref","","",20,[[]]],[11,"deref_mut","","",19,[[]]],[11,"deref_mut","","",20,[[]]],[11,"fmt","polars::datatypes","",50,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",53,[[["formatter",3]],["result",6]]],[11,"fmt","polars::chunked_array","",33,[[["formatter",3]],["result",6]]],[11,"fmt","polars","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",0,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",54,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame::group_by","",55,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",53,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",0,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",54,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",50,[[["formatter",3]],["result",6]]],[11,"div","polars::series","",0,[[]]],[11,"div","","",0,[[]]],[11,"div","polars::chunked_array","",33,[[]]],[11,"sub","polars::series","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","polars::chunked_array","",33,[[]]],[11,"add","polars::series","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","polars::chunked_array","",33,[[]]],[11,"mul","polars::series","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","polars::chunked_array","",33,[[]]],[11,"not","polars","",134,[[]]],[11,"bitand","","",134,[[]]],[11,"bitor","","",134,[[]]],[11,"index","polars::frame","",54,[[]]],[11,"index","","",54,[[["range",3]]]],[11,"index","","",54,[[["rangeinclusive",3]]]],[11,"index","","",54,[[["rangefrom",3]]]],[11,"index","","",54,[[["rangeto",3]]]],[11,"index","","",54,[[["rangetoinclusive",3]]]],[11,"index","","",54,[[["rangefull",3]]]],[11,"index","","",54,[[]]],[11,"index_mut","","",54,[[]]],[11,"from_iter","polars::series","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","","",0,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array","",33,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array::builder","",21,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array","",33,[[["intoiterator",8]]]],[11,"from_iter","polars","",134,[[["intoiterator",8]]]],[11,"from_iter","","",135,[[["intoiterator",8]]]],[11,"from_iter","","",135,[[["intoiterator",8]]]],[11,"from_iter","","",135,[[["intoiterator",8]]]],[11,"from_iter","","",135,[[["intoiterator",8]]]],[11,"from_iter","","",135,[[["intoiterator",8]]]],[11,"from_iter","","",135,[[["intoiterator",8]]]],[11,"from_iter","","",133,[[["intoiterator",8]]]],[11,"from_iter","","",133,[[["intoiterator",8]]]],[11,"from_iter","","",133,[[["intoiterator",8]]]],[11,"from_iter","","",133,[[["intoiterator",8]]]],[11,"from_iter","polars::frame","PanicsPanics if Series have different lengths.",54,[[["intoiterator",8]]]],[11,"try_into","polars::series","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["time32millisecondchunked",6]]]],[11,"try_into","","",0,[[],[["result",4],["time32secondchunked",6]]]],[11,"try_into","","",0,[[],[["chunkedarray",3],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["result",4],["chunkedarray",3]]]],[11,"try_into","","",0,[[],[["durationmicrosecondchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["durationmillisecondchunked",6]]]],[11,"try_into","","",0,[[],[["durationsecondchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["intervaldaytimechunked",6]]]],[11,"try_into","","",0,[[],[["intervalyearmonthchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["result",4],["timestampnanosecondchunked",6]]]],[11,"try_into","","",0,[[],[["timestampmicrosecondchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["timestampmillisecondchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["timestampsecondchunked",6],["result",4]]]],[11,"try_into","","",0,[[],[["largelistchunked",6],["result",4]]]],[11,"source","polars::error","",53,[[],[["error",8],["option",4]]]],[11,"from_par_iter","polars::chunked_array","",33,[[["intoparalleliterator",8]]]],[11,"from_par_iter","polars","",134,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",135,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",135,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",135,[[["intoparalleliterator",8]]]],[11,"from_par_iter","","",135,[[["intoparalleliterator",8]]]],[11,"to_ndarray","polars::datatypes","If all nested `Series` have the same length, a 2…",133,[[],[["result",6],["array2",6]]]],[11,"to_ndarray","polars::frame","Create a 2D `ndarray::Array` from this `DataFrame`. This…",54,[[],[["result",6],["array2",6]]]],[11,"rand_bernoulli","polars::datatypes","Create `ChunkedArray` with samples from a Bernoulli…",134,[[],["result",6]]],[11,"new_utf8_from_slice","","",135,[[]]],[11,"new_utf8_from_opt_slice","","",135,[[]]],[11,"to_json","","Generate a JSON representation of the data type",45,[[],["value",4]]],[11,"new","polars::frame::ser::csv","Create a new builder for configuring CSV parsing options.",127,[[],["readerbuilder",3]]],[11,"with_schema","","Set the CSV file\'s schema",127,[[["schema",3],["arc",3]],["readerbuilder",3]]],[11,"has_header","","Set whether the CSV file has headers",127,[[],["readerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",127,[[],["readerbuilder",3]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",127,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",127,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",127,[[["vec",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",127,[[],[["result",4],["reader",3],["arrowerror",4]]]],[11,"new","","Create a new builder for configuring CSV writing options.",128,[[],["writerbuilder",3]]],[11,"has_headers","","Set whether to write headers",128,[[],["writerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",128,[[],["writerbuilder",3]]],[11,"with_date_format","","Set the CSV file\'s date format",128,[[["string",3]],["writerbuilder",3]]],[11,"with_time_format","","Set the CSV file\'s time format",128,[[["string",3]],["writerbuilder",3]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp format",128,[[["string",3]],["writerbuilder",3]]],[11,"build","","Create a new `Writer`",128,[[],["writer",3]]],[11,"new","polars::frame::ser::json","Create a new builder for configuring JSON parsing options.",130,[[],["readerbuilder",3]]],[11,"with_schema","","Set the JSON file\'s schema",130,[[["schema",3],["arc",3]],["readerbuilder",3]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",130,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",130,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",130,[[["string",3],["vec",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",130,[[],[["arrowerror",4],["result",4],["reader",3]]]],[11,"new","polars::prelude","Creates a new field",131,[[["datatype",4]],["field",3]]],[11,"new_dict","","Creates a new field",131,[[["datatype",4]],["field",3]]],[11,"name","","Returns an immutable reference to the `Field`\'s name",131,[[],["string",3]]],[11,"data_type","","Returns an immutable reference to the `Field`\'s  data-type",131,[[],["datatype",4]]],[11,"is_nullable","","Indicates whether this `Field` supports null values",131,[[]]],[11,"from","","Parse a `Field` definition from a JSON representation",131,[[["value",4]],[["field",3],["arrowerror",4],["result",4]]]],[11,"to_json","","Generate a JSON representation of the `Field`",131,[[],["value",4]]],[11,"try_merge","","Merge field into self if it is compatible. Struct will be…",131,[[["field",3]],[["result",4],["arrowerror",4]]]],[11,"empty","","Creates an empty `Schema`",132,[[],["schema",3]]],[11,"new","","Creates a new `Schema` from a sequence of `Field` values",132,[[["vec",3],["field",3]],["schema",3]]],[11,"new_with_metadata","","Creates a new `Schema` from a sequence of `Field` values…",132,[[["field",3],["string",3],["vec",3],["randomstate",3],["hashmap",3]],["schema",3]]],[11,"try_merge","","Merge schema into self if it is compatible. Struct fields…",132,[[],[["result",4],["schema",3],["arrowerror",4]]]],[11,"fields","","Returns an immutable reference of the vector of `Field`…",132,[[],["vec",3]]],[11,"field","","Returns an immutable reference of a specific `Field`…",132,[[],["field",3]]],[11,"field_with_name","","Returns an immutable reference of a specific `Field`…",132,[[],[["result",4],["arrowerror",4],["field",3]]]],[11,"index_of","","Find the index of the column with the given name",132,[[],[["result",4],["arrowerror",4]]]],[11,"metadata","","Returns an immutable reference to the Map of custom…",132,[[],["hashmap",3]]],[11,"column_with_name","","Look up a column by name and return a immutable reference…",132,[[],["option",4]]],[11,"to_json","","Generate a JSON representation of the `Schema`",132,[[],["value",4]]],[11,"from","","Parse a `Schema` definition from a JSON representation",132,[[["value",4]],[["result",4],["schema",3],["arrowerror",4]]]]],"p":[[4,"Series"],[8,"NamedFrom"],[4,"FillNoneStrategy"],[8,"TakeRandom"],[8,"TakeRandomUtf8"],[8,"ChunkTake"],[8,"ChunkSet"],[8,"ChunkCast"],[8,"ChunkApply"],[8,"ChunkAgg"],[8,"ChunkCompare"],[8,"ChunkUnique"],[8,"ChunkSort"],[8,"ChunkFillNone"],[8,"ChunkFull"],[8,"ChunkReverse"],[8,"ChunkFilter"],[8,"ChunkShift"],[8,"Pow"],[3,"PrimitiveChunkedBuilder"],[3,"Utf8ChunkedBuilder"],[3,"AlignedVec"],[3,"LargeListPrimitiveChunkedBuilder"],[8,"AlignedAlloc"],[8,"NewChunkedArray"],[8,"LargListBuilderTrait"],[3,"LargeListUtf8ChunkedBuilder"],[8,"ChunkOps"],[4,"NumericChunkIterDispatch"],[4,"Utf8ChunkIterDispatch"],[4,"BooleanIterDispatch"],[4,"ListIterDispatch"],[8,"IntoNoNullIterator"],[3,"ChunkedArray"],[4,"NumTakeRandomDispatch"],[8,"AsTakeIndex"],[8,"IntoTakeRandom"],[8,"FromNaiveTime"],[8,"AsNaiveTime"],[8,"FromNaiveDateTime"],[8,"FromNaiveDate"],[8,"AsNaiveDateTime"],[8,"AsNaiveDate"],[8,"ValueCounts"],[8,"Downcast"],[4,"ArrowDataType"],[8,"ArrowPrimitiveType"],[4,"DateUnit"],[4,"IntervalUnit"],[4,"TimeUnit"],[4,"AnyType"],[8,"PolarsDataType"],[8,"ToStr"],[4,"PolarsError"],[3,"DataFrame"],[3,"GroupBy"],[3,"Pivot"],[8,"HashJoin"],[8,"Selection"],[3,"CsvWriter"],[3,"CsvReader"],[3,"IPCWriter"],[3,"JsonReader"],[3,"ParquetReader"],[8,"SerReader"],[8,"SerWriter"],[8,"ArrowReader"],[8,"IntoSeries"],[8,"LhsNumOps"],[3,"NumIterSingleChunkNullCheck"],[3,"NumIterSingleChunk"],[3,"NumIterManyChunk"],[3,"NumIterManyChunkNullCheck"],[3,"Utf8IterCont"],[3,"Utf8IterSingleChunk"],[3,"Utf8IterSingleChunkNullCheck"],[3,"Utf8IterManyChunk"],[3,"Utf8IterManyChunkNullCheck"],[3,"BooleanIterCont"],[3,"BooleanIterSingleChunk"],[3,"BooleanIterSingleChunkNullCheck"],[3,"BooleanIterManyChunk"],[3,"BooleanIterManyChunkNullCheck"],[3,"ListIterCont"],[3,"ListIterSingleChunk"],[3,"ListIterSingleChunkNullCheck"],[3,"ListIterManyChunk"],[3,"ListIterManyChunkNullCheck"],[3,"NumTakeRandomChunked"],[3,"NumTakeRandomCont"],[3,"NumTakeRandomSingleChunk"],[3,"Utf8TakeRandom"],[3,"Utf8TakeRandomSingleChunk"],[3,"BoolTakeRandom"],[3,"BoolTakeRandomSingleChunk"],[3,"ListTakeRandom"],[3,"ListTakeRandomSingleChunk"],[3,"BooleanType"],[3,"Date32Type"],[3,"Date64Type"],[3,"DurationMicrosecondType"],[3,"DurationMillisecondType"],[3,"DurationNanosecondType"],[3,"DurationSecondType"],[3,"Float32Type"],[3,"Float64Type"],[3,"Int16Type"],[3,"Int32Type"],[3,"Int64Type"],[3,"Int8Type"],[3,"IntervalDayTimeType"],[3,"IntervalYearMonthType"],[3,"Time32MillisecondType"],[3,"Time32SecondType"],[3,"Time64MicrosecondType"],[3,"Time64NanosecondType"],[3,"TimestampMicrosecondType"],[3,"TimestampMillisecondType"],[3,"TimestampNanosecondType"],[3,"TimestampSecondType"],[3,"UInt16Type"],[3,"UInt32Type"],[3,"UInt64Type"],[3,"UInt8Type"],[3,"Utf8Type"],[3,"LargeListType"],[3,"RecordBatchIter"],[3,"ReaderBuilder"],[3,"WriterBuilder"],[3,"IPCReader"],[3,"ReaderBuilder"],[3,"Field"],[3,"Schema"],[6,"LargeListChunked"],[6,"BooleanChunked"],[6,"Utf8Chunked"],[6,"Time64NanosecondChunked"],[6,"Time64MicrosecondChunked"],[6,"Time32MillisecondChunked"],[6,"Time32SecondChunked"],[6,"Date64Chunked"],[6,"TimestampNanosecondChunked"],[6,"TimestampMicrosecondChunked"],[6,"TimestampMillisecondChunked"],[6,"TimestampSecondChunked"],[6,"Date32Chunked"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);