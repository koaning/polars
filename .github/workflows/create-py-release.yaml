name: Create Python release


on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'py-polars-v*' # Push events to matching py-polars-v*, i.e. py-polars-v1.0, py-polars-v-v20.15.10
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8"]
    steps:
        - uses: actions/checkout@v2
        - name: Install latest Rust nightly
          uses: actions-rs/toolchain@v1
          with:
            toolchain: nightly-2020-04-22
            override: true
            components: rustfmt, clippy
        - name: Set up Python
#          run: |
#            sudo apt-get update -y
#            sudo apt-get install software-properties-common -y
#            sudo add-apt-repository ppa:deadsnakes/ppa -y
#            sudo apt-get update -y
#            sudo apt-get install python3.6 python3.6-dev python3.7 python3.7-dev -y
#            which python3
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install maturin pytest
        - name: Run tests
          run: |
            cd py-polars
            ./tasks.sh build-run-tests
            rm wheels/*
        - name: Publish wheel
          env:
            MATURIN_PASSWORD: ${{ secrets.PYPI_PASS }}
          run: |
            cd py-polars
            maturin publish \
            -o wheels \
            -i python${{ matrix.python-version }} \
            --repository-url https://test.pypi.org/legacy/ \
            --username ritchie46 \
            --target x86_64-unknown-linux-gnu
#        - name: Create Release
#          id: create_release
#          uses: actions/create-release@v1
#          env:
#            # This token is provided by Actions, you do not need to create your own token
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            tag_name: ${{ github.ref }}
#            release_name: Release ${{ github.ref }}
#            draft: false
#            prerelease: false
#        - name: Upload Release Asset
#          id: upload-release-asset
#          uses: actions/upload-release-asset@v1
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
#            # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: ./py-polars/wheels.zip
#            asset_name: wheels.zip
#            asset_content_type: application/zip